---
title: "Pytorch 기본 문법 이해"
subtitle: "텐서 인덱싱, 조건 연산 및 저장"
author: "한지희"
format:
  revealjs:
    embed-resources: true
date: 2023/10/01
footer: "YCC 딥러닝 스터디 3주차"
logo: section2_img/pytorchlogo.png
---
## Tensor Indexing{.smaller}
- **indexing**: 텐서의 특정 데이터 가져오기
 <img src="section2_img/tensorindexing.png" alt="tensor_indexing" width="60%"></img> 

## Tensor Indexing{.smaller}
```{python}
#| eval: true
#| echo: false
import torch
```

```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "|5|6|7|8"
data1 = torch.FloatTensor([[0, 1, 2, 3, 4], 
[5, 6, 7, 8, 9], 
[10, 11, 12, 13, 14]])
print(data1, data1.shape)
print(data1[1,2])
print(data1[:, 1])
print(data1[:,-1])
print(data1[:, :]) #전체
```

## Boolean Indexing{.smaller}
```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "4-5|6"
data1 = torch.FloatTensor([[0, 1, 2, 3, 4], 
[5, 6, 7, 8, 9], 
[10, 11, 12, 13, 14]])
data2 = data1 > 7
print(data2) #T/F 출력
print(data1[data2]) #T인 값만 추출
```

```{python}
#| eval: true
#| echo: true
print(data1[(data1 < 3)| (data1 > 11)])
```

## Fancy Indexing{.smaller}
- **Fancy Indexing**: 배열로 배열을 인덱싱
- 특정 행 배열 추출
```{python}
#| eval: true
#| echo: true
data1 = torch.randn(4,3)
print(data1)
print(data1[[1,2]])
print(data1[[2,1]])
```

- 특정 행과 열 추출
```{python}
#| eval: true
#| echo: true
print(data1[[1,2]][:, [0,2]])
```

## Shallow vs. Deep copy{.smaller}
<img src="section2_img/copy.webp" alt="copy"></img>

## Shallow copy{.smaller}
```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "|3|4"
data1 = torch.FloatTensor([[1, 2, 3],[4, 5, 6]])
print(data1)
data2 = data1[:2, :2]
data2[1, 1] = 4
print(data2)
print(data1)
```

## Deep copy: .clone().detach(){.smaller}
- **.clone()**: 새로운 메모리 할당 (.requires_grad=**True**, **NO** in-place operation error)
- **.detach()**: 계산 그래프에서 배제 (.requires_grad=**False**, **YES** in-place operation error)
  - in-place operation error: 불변성을 유지해야 하는 데이터 구조(gradient 계산)에서의 변경으로 인한 오류
  - requires_grad: 텐서가 gradient 계산해야 하는지 여부(True: 계산 활성화)
```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "|4-6|8-10|12-14"
data1 = torch.ones(5, requires_grad=True)
print(data1)

data2 = data1.clone()
data2[1] = 2
print(data1, data2.requires_grad)

data3 = data1.detach()
data3[1] = 3
print(data1, data3.requires_grad)
```

## Deep copy: .clone().detach(){.smaller}
#### ※ 참고: .clone().detach() vs. .detach().clone()
- 역할은 동일하지만 .detach().clone()이 조금 더 빠르다! ^[<a href="https://hongl.tistory.com/363">출처</a>: https://hongl.tistory.com/363]
```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "|4-6|8-10"
data1 = torch.ones(5, requires_grad=True)
print(data1)

data2 = data1.clone().detach()
data2[1] = 2
print(data1, data2.requires_grad)

data3 = data1.detach().clone()
data3[1] = 3
print(data1, data3.requires_grad)
```

## Deep copy: .clone().detach(){.smaller}
#### ※ 참고: .clone().detach() vs. .detach().clone()
- 역할은 동일하지만 .detach().clone()이 조금 더 빠르다! ^[<a href="https://hongl.tistory.com/363">출처</a>: https://hongl.tistory.com/363]
<img src="section2_img/detachclone.png" alt="detachclone graph" width="70%"></img>

## Tensor Condition Operation: where(){.smaller}
- torch.where(condition, if true, if false)
- 조건에 맞는 값 indexing
```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "|2"
data1 = torch.FloatTensor([7, 2, 0, 4, 1])
index = torch.where(data1 < 3)
print(index)
print(data1[index])
```

- 조건에 맞는 값 변환
```{python}
#| eval: true
#| echo: true
data2 = torch.where(data1 < 3, -1, 1)
print(data2)
```

- 다차원 배열에도 적용 가능

## Tensor Data Analysis{.smaller}
```{python}
#| eval: true
#| echo: true
data1 = torch.FloatTensor([ [1, 2, 3], [4, 5, 6] ])
print (data1.min())
print (data1.max())
print (data1.sum())
print (data1.mean())
print (data1.var())
print (data1.std())
print (data1.argmin()) #인덱스
print (data1.argmax()) #인덱스
```

## Save and Load Tensor{.smaller}
#### (1) 텐서가 하나일 때
- **torch.save(배열, '파일명.pt')**: 텐서를 파일로 저장
- **torch.load()**: 파일로 저장된 1차원 배열 읽어오기
```{python}
#| eval: true
#| echo: true
data1 = torch.linspace(1, 5, 4)
print(data1)
torch.save(data1, 'mydata1.pt')

data2 = torch.load('mydata1.pt')
print(data2)
```

<img src="section2_img/saved.png" alt="saved files" width="30%" height="30%"></img>

## Save and Load Tensor{.smaller}
#### (2) 텐서가 여러개일 때
- 각 배열을 **딕셔너리 형태(key: 배열)**로 지정 후 저장
- key값을 활용해서 각 배열을 읽어올 수 있음
```{python}
#| eval: true
#| echo: true
#| code-line-numbers: "|8|9|11|12-14"
data1 = torch.linspace(1, 5, 4)
data2 = torch.linspace(1, 10, 4)
data3 = torch.linspace(1, 100, 4)
print (data1)
print (data2)
print (data3)

datas1 = {'data1': data1, 'data2': data2, 'data3': data3}
torch.save(datas1, 'mydata2.pt')

datas2 = torch.load('mydata2.pt')
print (datas2['data1'])
print (datas2['data2'])
print (datas2['data3'])
```
